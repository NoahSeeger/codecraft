export type Tile = "empty" | "wall" | "start" | "goal" | "berry";

export interface Level {
  id: number;
  name: string;
  grid: Tile[][];
  start: { x: number; y: number; direction: "up" | "down" | "left" | "right" };
  goal: { x: number; y: number };
  tutorial: string;
  solution: string;
  berries?: number; // Anzahl zu sammelnder Berries (optional)
  difficulty: number; // 1-5
}

export const SYNTAX_HELP = `
Erlaubte Befehle:

MOVE
TURN LEFT
TURN RIGHT
PICKUP

IF <BEDINGUNG>
  ...
[ELSE
  ...]

WHILE <BEDINGUNG>
  ...

Bedingungen:
  ISBLOCKED
  NOT ISBLOCKED
  GETBLOCK == berry
  GETBLOCK == free

Blöcke werden durch Einrückung (2 Leerzeichen) markiert, ähnlich wie in Python. Ein IF/ELSE/WHILE gilt für alle eingerückten Zeilen darunter.

Beispiele:
IF ISBLOCKED
  TURN DOWN
  MOVE
  PICKUP
  TURN RIGHT
  MOVE
ELSE
  MOVE
END

WHILE NOT ISBLOCKED
  MOVE

PICKUP
`;

export const levels: Level[] = [
  {
    id: 1,
    name: "Tutorial 1: MOVE & TURN",
    grid: [
      ["wall", "wall", "wall", "wall", "wall"],
      ["wall", "start", "empty", "empty", "wall"],
      ["wall", "wall", "empty", "goal", "wall"],
      ["wall", "wall", "wall", "wall", "wall"],
    ],
    start: { x: 1, y: 1, direction: "right" },
    goal: { x: 3, y: 2 },
    tutorial:
      "Use MOVE to go forward and TURN LEFT/RIGHT to change direction. Reach the goal!",
    solution: `# Use MOVE to go forward\n# Use TURN RIGHT to turn\nMOVE\nMOVE\nTURN RIGHT\nMOVE`,
    berries: 0,
    difficulty: 1,
  },
  {
    id: 2,
    name: "Tutorial 2: PICKUP",
    grid: [
      ["wall", "wall", "wall", "wall", "wall"],
      ["wall", "start", "berry", "goal", "wall"],
      ["wall", "wall", "wall", "wall", "wall"],
    ],
    start: { x: 1, y: 1, direction: "right" },
    goal: { x: 3, y: 1 },
    tutorial: "Use PICKUP to collect the berry and reach the goal.",
    solution: `# Use MOVE to go forward\n# Use PICKUP to collect the berry\nMOVE\nPICKUP\nMOVE`,
    berries: 1,
    difficulty: 1,
  },
  {
    id: 3,
    name: "Tutorial 3: IF",
    grid: [
      ["wall", "wall", "wall", "wall", "wall"],
      ["wall", "start", "empty", "wall", "goal"],
      ["wall", "wall", "wall", "wall", "wall"],
    ],
    start: { x: 1, y: 1, direction: "right" },
    goal: { x: 4, y: 1 },
    tutorial:
      "Use IF to check for a wall. If blocked, turn right. Otherwise, move forward.",
    solution: `# Use IF ISBLOCKED to check for a wall\n# Use ELSE for the alternative\nIF ISBLOCKED\n  TURN RIGHT\nELSE\n  MOVE`,
    berries: 0,
    difficulty: 2,
  },
  {
    id: 4,
    name: "Tutorial 4: WHILE",
    grid: [
      ["wall", "wall", "wall", "wall", "wall", "wall"],
      ["wall", "start", "berry", "berry", "goal", "wall"],
      ["wall", "wall", "wall", "wall", "wall", "wall"],
    ],
    start: { x: 1, y: 1, direction: "right" },
    goal: { x: 4, y: 1 },
    tutorial:
      "Use WHILE to repeat actions. Collect all berries and reach the goal.",
    solution: `# Use WHILE to repeat as long as there is a berry ahead\nWHILE GETBLOCK == berry\n  MOVE\n  PICKUP\nMOVE`,
    berries: 2,
    difficulty: 2,
  },
  {
    id: 5,
    name: "Tutorial 5: IF/ELSE & Nesting",
    grid: [
      ["wall", "wall", "wall", "wall", "wall", "wall"],
      ["wall", "start", "berry", "empty", "goal", "wall"],
      ["wall", "wall", "wall", "wall", "wall", "wall"],
    ],
    start: { x: 1, y: 1, direction: "right" },
    goal: { x: 4, y: 1 },
    tutorial:
      "Use IF/ELSE to handle different situations. Try to collect the berry if there is one ahead, otherwise just move.",
    solution: `# Use IF/ELSE to check for a berry\nIF GETBLOCK == berry\n  MOVE\n  PICKUP\nELSE\n  MOVE`,
    berries: 1,
    difficulty: 3,
  },
  {
    id: 6,
    name: "Level 6: Test Level",
    grid: [
      ["wall", "wall", "wall", "wall", "wall", "wall", "wall"],
      ["wall", "start", "berry", "empty", "berry", "goal", "wall"],
      ["wall", "wall", "wall", "wall", "wall", "wall", "wall"],
    ],
    start: { x: 1, y: 1, direction: "right" },
    goal: { x: 6, y: 1 },
    tutorial: "Sammle alle Berries, überspringe leere Felder.",
    solution:
      "WHILE NOT ISBLOCKED\n  IF GETBLOCK == berry\n    MOVE\n    PICKUP\n  ELSE\n    MOVE\n  END\nEND",
    berries: 2,
    difficulty: 4,
  },
  {
    id: 7,
    name: "Level 7: Das große Labyrinth",
    grid: [
      [
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
      ],
      [
        "wall",
        "start",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "berry",
        "wall",
      ],
      [
        "wall",
        "empty",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
      ],
      [
        "wall",
        "empty",
        "wall",
        "wall",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
      ],
      [
        "wall",
        "empty",
        "wall",
        "empty",
        "empty",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
      ],
      [
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
      ],
      [
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
      ],
      [
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "wall",
      ],
      [
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
      ],
      [
        "wall",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
      ],
      [
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
      ],
      [
        "wall",
        "empty",
        "wall",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "wall",
      ],
      [
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
      ],
      [
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
      ],
      [
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
      ],
      [
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
        "berry",
        "wall",
      ],
      [
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
      ],
      [
        "wall",
        "berry",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "wall",
        "empty",
        "empty",
        "empty",
        "wall",
      ],
      [
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
        "wall",
        "wall",
        "empty",
        "wall",
      ],
      [
        "wall",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "empty",
        "berry",
        "goal",
      ],
    ],
    start: { x: 1, y: 1, direction: "right" },
    goal: { x: 19, y: 19 },
    tutorial:
      "Finde den Weg durch das große Labyrinth, sammle alle 5 Berries und erreiche das Ziel!",
    solution: "// Lösung ist zu lang für ein Beispiel!",
    berries: 5,
    difficulty: 5,
  },
];
